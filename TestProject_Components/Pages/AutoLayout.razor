@page "/auto_layout"
@page "/auto_layout/{layout}"
<SourceCodeLink Repository="Blazor.Diagrams" Page="@(nameof(AutoLayout))" />

<div style="display:grid; grid-template-rows: auto 1fr; height: 100%; grid-row-gap: 1em">
    <div style="grid-row: 1">
        <a href="auto_layout/@nameof(Algorithm.FastIncremental)">@nameof(Algorithm.FastIncremental)</a>
        <br />
        <a href="auto_layout/@nameof(Algorithm.MultiDimensionalScaling)">@nameof(Algorithm.MultiDimensionalScaling)</a>
        <br />
        <a href="auto_layout/@nameof(Algorithm.Ranking)">@nameof(Algorithm.Ranking)</a>
        <br />
        <a href="auto_layout/@nameof(Algorithm.Sugiyama)">@nameof(Algorithm.Sugiyama)</a>
        <br />
        <a href="auto_layout/@nameof(Algorithm.TreeVertical)">@nameof(Algorithm.TreeVertical)</a>
        <br />
        <a href="auto_layout/@nameof(Algorithm.TreeHorizontal)">@nameof(Algorithm.TreeHorizontal)</a>
    </div>

    @code {
        [Parameter] public string layout { set { Enum.TryParse<Algorithm>(value, out var v); if (v != Layout) { Layout = v; } } }
        Algorithm Layout { get; set; }
    }

    <button @onclick="Run">Run layout algorithm again</button>

    <Diagram style="grid-row: 2">
        <Nodes>
            @foreach (var node in nodes)
            {
                <RectangleNode Id="@node.Id" @bind-X="@node.X" @bind-Y="@node.Y">
                    <div>Hello @node.Id</div>
                </RectangleNode>
            }
        </Nodes>
        <Links>
            @foreach (var (s, t) in sources.Zip(targets, (a, b) => (a, b)))
            {
                <StraightLink Source="s" Target="t" Arrow="Arrow.Target" />
            }
        </Links>
        <AutoLayoutSettings Algorithm="Layout" @ref="auto_layout" />
    </Diagram>
</div>

@code {
    private AutoLayoutSettings auto_layout;
    private void Run()
    {
        auto_layout.Run();
    }
    private class Node
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
    }
    private List<Node> nodes = Enumerable.Range(0, 50).Select(i => new Node { Id = i.ToString() }).ToList();
    private List<NodeAnchor> sources = Enumerable.Empty<NodeAnchor>()
        .Concat(Enumerable.Range(1, 9).Select(_ => new NodeAnchor { NodeId = "0" }))
        .Concat(Enumerable.Range(1, 9).Select(_ => new NodeAnchor { NodeId = "19" }))
        .Concat(Enumerable.Range(1, 4).Select(_ => new NodeAnchor { NodeId = "29" }))
        .Concat(Enumerable.Range(1, 4).Select(_ => new NodeAnchor { NodeId = "39" }))
        .Concat(Enumerable.Range(1, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(10, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(10, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(20, 4).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(30, 6).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(30, 4).Select(i => new NodeAnchor { NodeId = "33" }))
        .Append(new NodeAnchor { NodeId = "17" })
        .Append(new NodeAnchor { NodeId = "5" })
        .ToList();
    private static Random rnd = new Random();
    private List<NodeAnchor> targets = Enumerable.Empty<NodeAnchor>()
        .Concat(Enumerable.Range(1, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }).Reverse())
        .Concat(Enumerable.Range(1, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(1, 4).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(5, 4).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(10, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(20, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(20, 9).Select(i => new NodeAnchor { NodeId = i.ToString() }).OrderBy(_ => rnd.NextDouble()))
        .Concat(Enumerable.Range(30, 4).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(40, 6).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Concat(Enumerable.Range(44, 4).Select(i => new NodeAnchor { NodeId = i.ToString() }))
        .Append(new NodeAnchor { NodeId = "3" })
        .Append(new NodeAnchor { NodeId = "6" })
        .ToList();
}
